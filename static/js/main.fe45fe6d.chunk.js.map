{"version":3,"sources":["store/appSlice.js","utils/config.js","components/Input/Input.jsx","components/Button/Button.jsx","store/formSlice.js","components/CustomSelect/CustomSelect.jsx","store/userSlice.js","components/CustomCheckbox/CustomCheckbox.jsx","components/FormRedux/FormRedux.jsx","components/Popup/Popup.jsx","components/App/App.js","store/index.js","index.js"],"names":["appSlice","createSlice","name","initialState","isPopupOpen","status","errors","reducers","handlePopup","state","action","payload","actions","REG_MANE","REG_EMAIL","REG_PHONE","Input","labelName","inputName","type","onInput","value","placeholder","className","id","Button","onClick","children","isValid","disabled","formSlice","currentLanguage","languageList","isLanguageListOpen","values","email","phone","selectLang","checkboxReg","isFormValid","handleValuesChange","validateMessage","length","test","toggleLanguageListOpen","setCurrentLanguage","toggleCheckboxReg","validateForm","resetForm","CustomSelect","dispatch","useDispatch","useSelector","form","handleSelect","handleSelecetItem","e","target","innerText","selectListClassName","onFocus","onBlur","readOnly","map","item","userSlice","currentUser","setCurrentUser","CustomCheckbox","checkboxClassName","to","FormRedux","submitButtonClassName","handleChange","handleSubmit","preventDefault","language","onSubmit","Popup","user","app","handleClosePopup","popupClassName","popupContainerClassName","stopPropagation","App","handleEsc","keyCode","window","addEventListener","removeEventListener","configureStore","reducer","appReduser","formReduser","userReduser","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"+TAEMA,EAAWC,YAAY,CAC3BC,KAAM,MACNC,aAAc,CACZC,aAAa,EACbC,OAAQ,KACRC,OAAQ,MAEVC,SAAU,CACRC,YADQ,SACIC,EAAOC,GACjBD,EAAML,YAAcM,EAAOC,YAM/BH,EACER,EAASY,QADXJ,YAGaR,IAAf,QCpBaa,EAAW,qGACXC,EAAY,4CAEZC,EAAY,uD,eC2BVC,EA5BD,SAAC,GAQR,IAPLC,EAOI,EAPJA,UACAC,EAMI,EANJA,UACAC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,MACAf,EAEI,EAFJA,OACAgB,EACI,EADJA,YAEA,OACE,sBAAKC,UAAU,QAAf,UACE,uBAAOA,UAAU,eAAjB,SACGN,IAEH,uBACEE,KAAMA,EACNjB,KAAMgB,EACNM,GAAIN,EACJK,UAAU,mCACVH,QAASA,EACTC,MAAOA,EACPC,YAAaA,IAEf,mBAAGC,UAAU,eAAb,SAA6BjB,QCfpBmB,G,MARA,SAAC,GAAqD,IAAnDN,EAAkD,EAAlDA,KAAMI,EAA4C,EAA5CA,UAAWG,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACpD,OACE,wBAAQC,SAAUD,EAAST,KAAMA,EAAMI,UAAWA,EAAWG,QAASA,EAAtE,SACGC,M,sBCFDG,EAAY7B,YAAY,CAC5BC,KAAM,OACNC,aAAc,CACZ4B,gBAAiB,2BACjBC,aAAc,CAAC,6CAAW,+DAAc,yDAAa,0DACrDC,oBAAoB,EACpBC,OAAQ,CAAEhC,KAAM,GAAIiC,MAAO,GAAIC,MAAO,IACtC9B,OAAQ,CAAEJ,MAAM,EAAOiC,OAAO,EAAOC,OAAO,GAC5CC,YAAY,EACZC,aAAa,EACbC,aAAa,GAEfhC,SAAU,CACRiC,mBADQ,SACW/B,EAAOC,GACxBD,EAAMyB,OAAN,2BACKzB,EAAMyB,QADX,kBAEGxB,EAAOC,QAAQT,KAAOQ,EAAOC,QAAQU,SAG1CoB,gBAPQ,SAOQhC,EAAOC,GACrB,MAAI,SAAAA,EAAOC,QACwB,IAA7BF,EAAMyB,OAAOhC,KAAKwC,YACpBjC,EAAMH,OAAN,2BACKG,EAAMH,QADX,kBAEGI,EAAOC,QAAU,0HAIjBE,EAAS8B,KAAKlC,EAAMyB,OAAOhC,WAOhCO,EAAMH,OAAN,2BAAoBG,EAAMH,QAA1B,kBAAmCI,EAAOC,SAAU,UANlDF,EAAMH,OAAN,2BACKG,EAAMH,QADX,kBAEGI,EAAOC,QAAU,wHAOpB,UAAAD,EAAOC,QACyB,IAA9BF,EAAMyB,OAAOC,MAAMO,YACrBjC,EAAMH,OAAN,2BACKG,EAAMH,QADX,kBAEGI,EAAOC,QAAU,uDAIjBG,EAAU6B,KAAKlC,EAAMyB,OAAOC,YAOjC1B,EAAMH,OAAN,2BAAoBG,EAAMH,QAA1B,kBAAmCI,EAAOC,SAAU,UANlDF,EAAMH,OAAN,2BACKG,EAAMH,QADX,kBAEGI,EAAOC,QAAU,oHAOD,UAAnBD,EAAOC,QACyB,IAA9BF,EAAMyB,OAAOE,MAAMM,YACrBjC,EAAMH,OAAN,2BACKG,EAAMH,QADX,kBAEGI,EAAOC,QAAU,0HAIjBI,EAAU4B,KAAKlC,EAAMyB,OAAOE,OAO7B3B,EAAMyB,OAAOE,MAAMM,OAAS,QAC9BjC,EAAMH,OAAN,2BACKG,EAAMH,QADX,kBAEGI,EAAOC,QAAU,sMAItBF,EAAMH,OAAN,2BAAoBG,EAAMH,QAA1B,kBAAmCI,EAAOC,SAAU,UAblDF,EAAMH,OAAN,2BACKG,EAAMH,QADX,kBAEGI,EAAOC,QAAU,yMAXxB,GA0BFiC,uBAtEQ,SAsEenC,GACrBA,EAAMwB,oBAAsBxB,EAAMwB,oBAEpCY,mBAzEQ,SAyEWpC,EAAOC,GACxBD,EAAMsB,gBAAkBrB,EAAOC,QAC/BF,EAAM4B,YAAa,GAErBS,kBA7EQ,SA6EUrC,GAChBA,EAAM6B,aAAe7B,EAAM6B,aAE7BS,aAhFQ,SAgFKtC,GACXA,EAAM8B,aACkB,IAAtB9B,EAAMH,OAAOJ,OACU,IAAvBO,EAAMH,OAAO6B,QACU,IAAvB1B,EAAMH,OAAO8B,QACQ,IAArB3B,EAAM4B,aACgB,IAAtB5B,EAAM6B,aAIVU,UA1FQ,SA0FEvC,GACRA,EAAM8B,aAAc,EACpB9B,EAAMyB,OAAS,CAAEhC,KAAM,GAAIiC,MAAO,GAAIC,MAAO,IAC7C3B,EAAMH,OAAS,CAAEJ,MAAM,EAAOiC,OAAO,EAAOC,OAAO,GACnD3B,EAAMsB,gBAAkB,2BACxBtB,EAAM4B,YAAa,EACnB5B,EAAM6B,aAAc,MAKnB,EAQHR,EAAUlB,QAPZ4B,EADK,EACLA,mBACAI,EAFK,EAELA,uBACAC,EAHK,EAGLA,mBACAC,EAJK,EAILA,kBACAL,EALK,EAKLA,gBACAM,EANK,EAMLA,aACAC,EAPK,EAOLA,UAGalB,IAAf,Q,MCtEemB,MAhDf,YAAsC,IAAdhC,EAAa,EAAbA,UAChBiC,EAAWC,cACjB,EAA8DC,aAC5D,SAAC3C,GAAD,OAAWA,EAAM4C,QADXrB,EAAR,EAAQA,aAAcD,EAAtB,EAAsBA,gBAAiBE,EAAvC,EAAuCA,mBAIjCqB,EAAe,WACnBJ,EAASN,MAGLW,EAAoB,SAACC,GACzBN,EAASL,EAAmBW,EAAEC,OAAOC,aAGjCC,EAAmB,uBACvB1B,EAAqB,sBAAwB,IAG/C,OACE,sBAAKV,UAAU,eAAf,UACE,uBAAOA,UAAU,eAAjB,SAAiCN,IACjC,sBAAKM,UAAU,iBAAf,UACE,uBACEA,UAAU,iDACVqC,QAASN,EACTO,OAAQP,EACRjC,MAAOU,EACP+B,UAAQ,IAEV,qBAAKvC,UAAU,iBACf,oBAAIA,UAAWoC,EAAf,SACG3B,EAAa+B,KAAI,SAACC,GACjB,OACE,oBAEEzC,UAAU,eACVG,QAAS6B,EAHX,SAKGS,GAJIA,eCxCfC,EAAYhE,YAAY,CAC5BC,KAAM,QACNC,aAAc,CACZ+D,YAAa,IAEf3D,SAAU,CACR4D,eADQ,SACO1D,EAAOC,GACpBD,EAAMyD,YAAcxD,EAAOC,QAC3BF,EAAMJ,QAAS,MAKN8D,EAAmBF,EAAUrD,QAA7BuD,eAEAF,IAAf,QCiBeG,EA7BQ,WACrB,IAAMlB,EAAWC,cACTb,EAAgBc,aAAY,SAAC3C,GAAD,OAAWA,EAAM4C,QAA7Cf,YAOR,IAAM+B,EAAiB,2BACrB/B,EAAc,0BAA4B,IAG5C,OACE,sBAAKf,UAAU,iCAAf,UACE,cAAC,EAAD,CACEJ,KAAK,SACLI,UAAW8C,EACX3C,QAdN,SAA6B8B,GAC3BN,EAASJ,KACTI,EAASH,QAcP,mBAAGxB,UAAU,kBAAb,8DACA,cAAC,IAAD,CAAS+C,GAAI,cAAe/C,UAAU,sBAAtC,wDAGA,mBAAGA,UAAU,kBAAb,gGCmESgD,EAnFG,WAChB,IAAMrB,EAAWC,cACjB,EAAyDC,aAAY,SAAC3C,GAAD,OAAWA,EAAM4C,QAA9EnB,EAAR,EAAQA,OAAQH,EAAhB,EAAgBA,gBAAiBzB,EAAjC,EAAiCA,OAAQiC,EAAzC,EAAyCA,YAEnCiC,EAAqB,yBACzBjC,EAAc,uBAAyB,0BAGnCkC,EAAe,SAACjB,GACpBN,EACEV,EAAmB,CAAEtC,KAAMsD,EAAEC,OAAOvD,KAAMmB,MAAOmC,EAAEC,OAAOpC,SAE5D6B,EAAST,EAAgBe,EAAEC,OAAOvD,OAClCgD,EAASH,MAGL2B,EAAe,SAAClB,GACpBA,EAAEmB,iBACFzB,EACEiB,EAAe,CACb/B,MAAOF,EAAOE,MACdlC,KAAMgC,EAAOhC,KACbiC,MAAOD,EAAOC,MACdyC,SAAU7C,KAGdmB,EAASF,KACTE,EAAS1C,GAAY,KAGvB,OACE,yBAASe,UAAU,OAAnB,SACE,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,cAAd,gFACA,sBAAKA,UAAU,iCAAf,UACE,mBAAGA,UAAU,kBAAb,qGACA,cAAC,IAAD,CAAS+C,GAAI,UAAW/C,UAAU,sBAAlC,+CAIF,uBAAMsD,SAAUH,EAAcnD,UAAU,aAAxC,UACE,cAAC,EAAD,CACEJ,KAAK,OACLD,UAAU,OACVD,UAAU,qBACVI,MAAOa,EAAOhC,MAAQ,GACtBkB,QAASqD,EACTnE,OAAQA,EAAOJ,KACfoB,YAAY,2FAEd,cAAC,EAAD,CACEH,KAAK,QACLD,UAAU,QACVD,UAAU,QACVI,MAAOa,EAAOC,OAAS,GACvBf,QAASqD,EACTnE,OAAQA,EAAO6B,MACfb,YAAY,wEAEd,cAAC,EAAD,CACEH,KAAK,MACLD,UAAU,QACVD,UAAU,kFACVI,MAAOa,EAAOE,OAAS,GACvBhB,QAASqD,EACTnE,OAAQA,EAAO8B,MACfd,YAAY,+HAEd,cAAC,EAAD,CAAcL,UAAU,6BACxB,cAAC,EAAD,IACA,cAAC,EAAD,CACEE,KAAK,SACLI,UAAWiD,EACX9C,QAASgD,EAHX,mICvCKI,G,MAtCD,WACZ,IAAM5B,EAAWC,cACTe,EAAgBd,aAAY,SAAC3C,GAAD,OAAWA,EAAMsE,QAA7Cb,YACA9D,EAAgBgD,aAAY,SAAC3C,GAAD,OAAWA,EAAMuE,OAA7C5E,YAEF6E,EAAmB,WACvB/B,EAAS1C,GAAY,KAGjB0E,EAAc,gBAClB9E,EAAc,eAAiB,gBAG3B+E,EAAuB,2BAC3B/E,EAAc,0BAA4B,2BAG5C,OACE,yBAASmB,UAAW2D,EAAgBxD,QAASuD,EAA7C,SACE,sBACE1D,UAAW4D,EACXzD,QAAS,SAAC8B,GAAD,OAAOA,EAAE4B,mBAFpB,UAIE,cAAC,EAAD,CACEjE,KAAK,SACLI,UAAU,6BACVG,QAASuD,IAEX,8CACA,4BAAIf,EAAYhE,OAChB,4BAAIgE,EAAY/B,QAChB,4BAAI+B,EAAY9B,QAChB,4BAAI8B,EAAYU,kBCTTS,MAtBf,WACE,IAAMnC,EAAWC,cAGVmC,EAAY,SAAC9B,GTNE,KSOhBA,EAAE+B,SACJrC,EAAS1C,GAAY,KAQzB,OAZwB4C,aAAY,SAAC3C,GAAD,OAAWA,EAAMuE,OAA7C5E,YASJoF,OAAOC,iBAAiB,UAAWH,GACnCE,OAAOE,oBAAoB,UAAWJ,GAGxC,sBAAK/D,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCnBSoE,cAAe,CAC5BC,QAAS,CACPZ,IAAKa,EACLxC,KAAMyC,EACNf,KAAMgB,KCDVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.fe45fe6d.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState: {\n    isPopupOpen: false,\n    status: null,\n    errors: null,\n  },\n  reducers: {\n    handlePopup(state, action) {\n      state.isPopupOpen = action.payload;\n    },\n  },\n});\n\nexport const {\n  handlePopup,\n} = appSlice.actions;\n\nexport default appSlice.reducer;\n","export const REG_MANE = /^[A-Za-zА-Яа-яЁё]+[A-Za-zА-Яа-яЁё -]+$/;\nexport const REG_EMAIL = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n\nexport const REG_PHONE = /^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/;\n\nexport const ESC_CODE = 27;\nexport const DELAY = 500;\n","import \"./Input.css\";\n\nconst Input = ({\n  labelName,\n  inputName,\n  type,\n  onInput,\n  value,\n  errors,\n  placeholder,\n}) => {\n  return (\n    <div className=\"input\">\n      <label className=\"input__label\">\n        {labelName}\n      </label>\n      <input\n        type={type}\n        name={inputName}\n        id={inputName}\n        className=\"input__field input__field_border\"\n        onInput={onInput}\n        value={value}\n        placeholder={placeholder}\n      />\n      <p className=\"input__error\">{errors}</p>\n    </div>\n  );\n};\n\nexport default Input;\n","import \"./Button.css\";\n\nconst Button = ({ type, className, onClick, children, isValid }) => {\n  return (\n    <button disabled={isValid} type={type} className={className} onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { REG_EMAIL, REG_MANE, REG_PHONE } from \"../utils/config\";\n\nconst formSlice = createSlice({\n  name: \"form\",\n  initialState: {\n    currentLanguage: \"Язык\",\n    languageList: [\"Русский\", \"Английский\", \"Китайский\", \"Испанский\"],\n    isLanguageListOpen: false,\n    values: { name: \"\", email: \"\", phone: \"\" },\n    errors: { name: false, email: false, phone: false },\n    selectLang: false,\n    checkboxReg: false,\n    isFormValid: false,\n  },\n  reducers: {\n    handleValuesChange(state, action) {\n      state.values = {\n        ...state.values,\n        [action.payload.name]: action.payload.value,\n      };\n    },\n    validateMessage(state, action) {\n      if (action.payload === `name`) {\n        if (state.values.name.length === 0) {\n          state.errors = {\n            ...state.errors,\n            [action.payload]: \"Необходимо ввести имя\",\n          };\n          return;\n        }\n        if (!REG_MANE.test(state.values.name)) {\n          state.errors = {\n            ...state.errors,\n            [action.payload]: \"Только буквы, - и пробел\",\n          };\n          return;\n        }\n        state.errors = { ...state.errors, [action.payload]: true };\n        return;\n      }\n      if (action.payload === `email`) {\n        if (state.values.email.length === 0) {\n          state.errors = {\n            ...state.errors,\n            [action.payload]: \"Введите E-mail\",\n          };\n          return;\n        }\n        if (!REG_EMAIL.test(state.values.email)) {\n          state.errors = {\n            ...state.errors,\n            [action.payload]: \"Введите корректный E-mail\",\n          };\n          return;\n        }\n        state.errors = { ...state.errors, [action.payload]: true };\n        return;\n      }\n      if (action.payload === \"phone\") {\n        if (state.values.phone.length === 0) {\n          state.errors = {\n            ...state.errors,\n            [action.payload]: \"Ввести номер телефона\",\n          };\n          return;\n        }\n        if (!REG_PHONE.test(state.values.phone)) {\n          state.errors = {\n            ...state.errors,\n            [action.payload]: \"Используйье только цифры, - / + / () и пробел\",\n          };\n          return;\n        }\n        if (state.values.phone.length < 10) {\n          state.errors = {\n            ...state.errors,\n            [action.payload]: \"Номер должен содержать больше 10 цифр\",\n          };\n          return;\n        }\n        state.errors = { ...state.errors, [action.payload]: true };\n        return;\n      }\n    },\n    toggleLanguageListOpen(state) {\n      state.isLanguageListOpen = !state.isLanguageListOpen;\n    },\n    setCurrentLanguage(state, action) {\n      state.currentLanguage = action.payload;\n      state.selectLang = true;\n    },\n    toggleCheckboxReg(state) {\n      state.checkboxReg = !state.checkboxReg;\n    },\n    validateForm(state) {\n      state.isFormValid =\n        state.errors.name === true &&\n        state.errors.email === true &&\n        state.errors.phone === true &&\n        state.selectLang === true &&\n        state.checkboxReg === true\n          ? true\n          : false;\n    },\n    resetForm(state) {\n      state.isFormValid = false;\n      state.values = { name: \"\", email: \"\", phone: \"\" };\n      state.errors = { name: false, email: false, phone: false };\n      state.currentLanguage = \"Язык\";\n      state.selectLang = false;\n      state.checkboxReg = false;\n    },\n  },\n});\n\nexport const {\n  handleValuesChange,\n  toggleLanguageListOpen,\n  setCurrentLanguage,\n  toggleCheckboxReg,\n  validateMessage,\n  validateForm,\n  resetForm,\n} = formSlice.actions;\n\nexport default formSlice.reducer;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setCurrentLanguage,\n  toggleLanguageListOpen,\n} from \"../../store/formSlice\";\nimport \"./CustomSelect.css\";\n\nfunction CustomSelect({ labelName }) {\n  const dispatch = useDispatch();\n  const { languageList, currentLanguage, isLanguageListOpen } = useSelector(\n    (state) => state.form\n  );\n\n  const handleSelect = () => {\n    dispatch(toggleLanguageListOpen());\n  };\n\n  const handleSelecetItem = (e) => {\n    dispatch(setCurrentLanguage(e.target.innerText));\n  };\n\n  const selectListClassName = `select__list ${\n    isLanguageListOpen ? \"select__list_active\" : \"\"\n  }`;\n\n  return (\n    <div className=\"select input\">\n      <label className=\"input__label\">{labelName}</label>\n      <div className=\"select__header\">\n        <input\n          className=\"select__input input__field input__field_border\"\n          onFocus={handleSelect}\n          onBlur={handleSelect}\n          value={currentLanguage}\n          readOnly\n        />\n        <div className=\"select__icon\"></div>\n        <ul className={selectListClassName}>\n          {languageList.map((item) => {\n            return (\n              <li\n                key={item}\n                className=\"select__item\"\n                onClick={handleSelecetItem}\n              >\n                {item}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default CustomSelect;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst userSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    currentUser: {},\n  },\n  reducers: {\n    setCurrentUser(state, action) {\n      state.currentUser = action.payload;\n      state.status = true;\n    },\n  },\n});\n\nexport const { setCurrentUser } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport Button from \"../Button/Button\";\nimport { NavLink } from \"react-router-dom\";\nimport { toggleCheckboxReg, validateForm } from \"../../store/formSlice\";\n\nconst CustomCheckbox = () => {\n  const dispatch = useDispatch();\n  const { checkboxReg } = useSelector((state) => state.form);\n\n  function handleClickCheckbox(e) {\n    dispatch(toggleCheckboxReg());\n    dispatch(validateForm());\n  }\n\n  const checkboxClassName = `button__checkbox ${\n    checkboxReg ? \"button__checkbox_active\" : \"\"\n  }`;\n\n  return (\n    <div className=\"form__text form__text_checkbox\">\n      <Button\n        type=\"button\"\n        className={checkboxClassName}\n        onClick={handleClickCheckbox}\n      />\n      <p className=\"form__paragraph\">принимаю</p>\n      <NavLink to={\"/conditions\"} className=\"button button__word\">\n        условия\n      </NavLink>\n      <p className=\"form__paragraph\">использования</p>\n    </div>\n  );\n};\n\nexport default CustomCheckbox;\n","import { useDispatch, useSelector } from \"react-redux\";\n\nimport Input from \"../Input/Input\";\nimport Button from \"../Button/Button\";\n\nimport \"./FormRedux.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { handleValuesChange, resetForm, validateForm, validateMessage } from \"../../store/formSlice.js\";\nimport CustomSelect from \"../CustomSelect/CustomSelect\";\nimport { handlePopup } from \"../../store/appSlice\";\nimport { setCurrentUser } from \"../../store/userSlice\";\nimport CustomCheckbox from \"../CustomCheckbox/CustomCheckbox\";\n\nconst FormRedux = () => {\n  const dispatch = useDispatch();\n  const { values, currentLanguage, errors, isFormValid } = useSelector((state) => state.form);\n\n  const submitButtonClassName = `button__submit ${\n    isFormValid ? \"button__submit_valid\" : \"button__submit_invalid\"\n  }`;\n\n  const handleChange = (e) => {\n    dispatch(\n      handleValuesChange({ name: e.target.name, value: e.target.value })\n    );\n    dispatch(validateMessage(e.target.name));\n    dispatch(validateForm());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(\n      setCurrentUser({\n        phone: values.phone,\n        name: values.name,\n        email: values.email,\n        language: currentLanguage,\n      })\n    );\n    dispatch(resetForm());\n    dispatch(handlePopup(true));\n  };\n\n  return (\n    <section className=\"form\">\n      <div className=\"form__container\">\n        <h2 className=\"form__title\">Регистрация</h2>\n        <div className=\"form__text form__text_redirect\">\n          <p className=\"form__paragraph\">Уже есть аккаунт?</p>\n          <NavLink to={\"/signin\"} className=\"button button__word\">\n            Войти\n          </NavLink>\n        </div>\n        <form onSubmit={handleSubmit} className=\"form__body\">\n          <Input\n            type=\"text\"\n            inputName=\"name\"\n            labelName=\"Имя\"\n            value={values.name || \"\"}\n            onInput={handleChange}\n            errors={errors.name}\n            placeholder=\"Введите Ваше имя\"\n          />\n          <Input\n            type=\"email\"\n            inputName=\"email\"\n            labelName=\"Email\"\n            value={values.email || \"\"}\n            onInput={handleChange}\n            errors={errors.email}\n            placeholder=\"Введите ваш email\"\n          />\n          <Input\n            type=\"tel\"\n            inputName=\"phone\"\n            labelName=\"Номер телефона\"\n            value={values.phone || \"\"}\n            onInput={handleChange}\n            errors={errors.phone}\n            placeholder=\"Введите номер телефона\"\n          />\n          <CustomSelect labelName=\"Язык\" />\n          <CustomCheckbox />\n          <Button\n            type=\"button\"\n            className={submitButtonClassName}\n            onClick={handleSubmit}\n          >\n            Зарегистрироваться\n          </Button>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default FormRedux;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport Button from \"../Button/Button\";\nimport { handlePopup } from \"../../store/appSlice\";\n\nimport \"./Popup.css\";\n\nconst Popup = () => {\n  const dispatch = useDispatch();\n  const { currentUser } = useSelector((state) => state.user);\n  const { isPopupOpen } = useSelector((state) => state.app);\n\n  const handleClosePopup = () => {\n    dispatch(handlePopup(false));\n  };\n\n  const popupClassName = `popup ${\n    isPopupOpen ? \"popup_opened\" : \"popup_closed\"\n  }`;\n\n  const popupContainerClassName = `popup__container ${\n    isPopupOpen ? \"popup__container_opened\" : \"popup__container_closed\"\n  }`;\n\n  return (\n    <section className={popupClassName} onClick={handleClosePopup}>\n      <div\n        className={popupContainerClassName}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <Button\n          type=\"button\"\n          className=\"button button__close-popup\"\n          onClick={handleClosePopup}\n        />\n        <h2>Current User</h2>\n        <p>{currentUser.name}</p>\n        <p>{currentUser.email}</p>\n        <p>{currentUser.phone}</p>\n        <p>{currentUser.language}</p>\n      </div>\n    </section>\n  );\n};\n\nexport default Popup;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { handlePopup } from \"../../store/appSlice\";\nimport { ESC_CODE } from \"../../utils/config\";\nimport FormRedux from \"../FormRedux/FormRedux\";\nimport Popup from \"../Popup/Popup\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { isPopupOpen } = useSelector((state) => state.app);\n   // CLOSE POPUP BY ESC\n   const handleEsc = (e) => {\n    if (e.keyCode === ESC_CODE) {\n      dispatch(handlePopup(false));\n    }\n  };\n\n  isPopupOpen\n    ? window.addEventListener(\"keydown\", handleEsc)\n    : window.removeEventListener(\"keydown\", handleEsc);\n\n  return (\n    <div className=\"App\">\n      <FormRedux />\n      <Popup />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport appReduser from \"./appSlice\";\nimport formReduser from \"./formSlice\";\nimport userReduser from \"./userSlice\";\n\nexport default configureStore({\n  reducer: {\n    app: appReduser,\n    form: formReduser,\n    user: userReduser,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}